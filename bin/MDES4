
import java.util.*;
import java.io.*;

public class MDES4 {
	
	private static final int sboxs[][][] = {	
{
  {15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
  {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
  {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
  {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}
},
	{
  {7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
  {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
  {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
  {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}
	}
};
    public static void main(String args[]){
    	BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
    	String plainText="how to you like computer science", key;
    	try{
    		
    		System.out.println("The Plaintext Used for Encryption is :"+plainText+"\n");
			String btext = toBinaryString(plainText);
			String ptext = fromBinaryString(btext);
    	} catch(Exception e){
    		System.out.println("Error reading plain text, exiting.");
    		return;
    	}
    	while((plainText.length() * 5) % 16 != 0)
    		plainText = plainText + " ";
    	    	String rawBinText = toBinaryString(plainText);
    	String lefts[] = new String[(plainText.length() * 5)/16];
    	String rights[] = new String[(plainText.length() * 5)/16];
    	
    	int x = 0; 
    	
    	for(int i = 0; i < rawBinText.length(); i += 16){
    		String block = rawBinText.substring(i, i + 16);

    		lefts[x] = block.substring(0, 8);
    		rights[x] = block.substring(8);
    		x++;
    	}
    	    	try{
    		
    		key = "101101010010100101101011";
    		System.out.println("The Key Used for Processing is : "+key);
    	}catch(Exception e){
    		System.out.println("Error reading key string, exiting.");
    		return;
    	}
    	 try{
    	StringBuffer output = new StringBuffer("");
    	    	for(x = 0; x < lefts.length; x++){
    		String right = rights[x];
    		String left = lefts[x];

    		for(int i = 0; i < key.length(); i += 12){
    			String blockKey = key.substring(i, i + 12);
    			String f = sboxing(right, blockKey);
    			String lXorf = addZeros(Integer.toBinaryString(Integer.parseInt(left,2) ^ Integer.parseInt(f,2)), 8);
				left = right;
				right = lXorf;
    		}
    		output.append(left + right);
    	}
    	String textOutput = fromBinaryString(output.toString());
    	System.out.println("\nCipher Text in Correspondence to Z(29):\n" + textOutput);
    }
    	 catch (StringIndexOutOfBoundsException e) {
			System.out.println("Please enter a key which is lenth of 24.Exiting...Run again");
		}
    }
    public static int sbox(String bitString, int box){
    	int row = Integer.parseInt("" + bitString.charAt(0) + bitString.charAt(5), 2);
    	int col = Integer.parseInt("" + bitString.substring(1, 5), 2);

    	return sboxs[box-1][row][col];
    }
    
    public static String toBinaryString(String text){
    	text = text.toLowerCase();
    	StringBuffer sb = new StringBuffer("");
    	
    	for(int i = 0; i < text.length(); i++)
			if(text.charAt(i) == 'Z')
				sb.append(Integer.toBinaryString(25));
    		else if(text.charAt(i) == ' ')
    			sb.append(Integer.toBinaryString(26));
    		else if(text.charAt(i) == '.')
    			sb.append(Integer.toBinaryString(27));
    		else if(text.charAt(i) == ',')
    			sb.append(Integer.toBinaryString(28));
    		else if(text.charAt(i) == '?')
    			sb.append(Integer.toBinaryString(29));
    		else if(text.charAt(i) == '(')
    			sb.append(Integer.toBinaryString(30));
    		else if(text.charAt(i) == ')')
    			sb.append(Integer.toBinaryString(31));
    		else
    			sb.append(Integer.toBinaryString((int)text.charAt(i) - 'A').substring(1));
    	return sb.toString();
} 
    public static String fromBinaryString(String text){
	text = text.toLowerCase();
	StringBuffer sb = new StringBuffer("");
	
	for(int i = 0; i < text.length(); i += 5){
		int num = Integer.parseInt(text.substring(i, i + 5), 2);
		if(num == 26)
			sb.append(' ');
		else if(num == 27)
			sb.append('.');
		else if(num == 28)
			sb.append(',');
		else if(num == 29)
			sb.append('?');
		else if(num == 30)
			sb.append('(');
		else if(num == 31)
			sb.append(')');
		else
			sb.append((char)(num + 'A')); 
	}
	return sb.toString();
}
    public static String addZeros(String bitString, int length){
    	StringBuffer sb = new StringBuffer(bitString);
    	
    	while(sb.length() < length)
    		sb.insert(0, '0');
    	return sb.toString(); 
    }
    
    public static String sboxing(String b, String x){
    	String newB = addEven(b);
    	String bk = addZeros(Integer.toBinaryString(Integer.parseInt(newB,2) ^ Integer.parseInt(x,2)), x.length());
    	String b1 = bk.substring(0,6);
    	String b2 = bk.substring(6);
    	return addZeros(Integer.toBinaryString(sbox(b1, 1)), 4) + addZeros(Integer.toBinaryString(sbox(b2, 2)), 4);
    }

    public static String addEven(String bitString){
    	StringBuffer sb = new StringBuffer(bitString);
    	
    	for(int i = 1; i < bitString.length(); i += 2)
    		sb.append(bitString.charAt(i));
    	return sb.toString();
}
}

